'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace Application20
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Application20Soap", [Namespace]:="urn:trisoft.be:WebServices:InfoShare:Application:2.0")>  _
    Partial Public Class Application20
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrentUserNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetApplicationNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReleasedStatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Esri_Trisoft_TopicStatus_Tool.My.MySettings.Default.Esri_Trisoft_TopicStatus_Tool_Application20_Application20
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVersionCompleted As GetVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrentUserNameCompleted As GetCurrentUserNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetApplicationNameCompleted As GetApplicationNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetResourceCompleted As GetResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReleasedStatesCompleted As GetReleasedStatesCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordCompleted As ChangePasswordCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:Application:2.0/Login", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Login(ByVal psApplication As String, ByVal psUserName As String, ByVal psPassword As String, ByRef psOutAuthContext As String) As String
            Dim results() As Object = Me.Invoke("Login", New Object() {psApplication, psUserName, psPassword, psOutAuthContext})
            psOutAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal psApplication As String, ByVal psUserName As String, ByVal psPassword As String, ByVal psOutAuthContext As String)
            Me.LoginAsync(psApplication, psUserName, psPassword, psOutAuthContext, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal psApplication As String, ByVal psUserName As String, ByVal psPassword As String, ByVal psOutAuthContext As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {psApplication, psUserName, psPassword, psOutAuthContext}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:Application:2.0/GetVersion", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVersion() As String
            Dim results() As Object = Me.Invoke("GetVersion", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVersionAsync()
            Me.GetVersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVersionAsync(ByVal userState As Object)
            If (Me.GetVersionOperationCompleted Is Nothing) Then
                Me.GetVersionOperationCompleted = AddressOf Me.OnGetVersionOperationCompleted
            End If
            Me.InvokeAsync("GetVersion", New Object(-1) {}, Me.GetVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVersionCompleted(Me, New GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:Application:2.0/GetCurrentUserName", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentUserName(ByVal psAuthContext As String, ByRef psOutUserName As String) As String
            Dim results() As Object = Me.Invoke("GetCurrentUserName", New Object() {psAuthContext, psOutUserName})
            psOutUserName = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrentUserNameAsync(ByVal psAuthContext As String, ByVal psOutUserName As String)
            Me.GetCurrentUserNameAsync(psAuthContext, psOutUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrentUserNameAsync(ByVal psAuthContext As String, ByVal psOutUserName As String, ByVal userState As Object)
            If (Me.GetCurrentUserNameOperationCompleted Is Nothing) Then
                Me.GetCurrentUserNameOperationCompleted = AddressOf Me.OnGetCurrentUserNameOperationCompleted
            End If
            Me.InvokeAsync("GetCurrentUserName", New Object() {psAuthContext, psOutUserName}, Me.GetCurrentUserNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrentUserNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrentUserNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrentUserNameCompleted(Me, New GetCurrentUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:Application:2.0/GetApplicationName", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetApplicationName(ByVal psAuthContext As String, ByRef psOutApplicationName As String) As String
            Dim results() As Object = Me.Invoke("GetApplicationName", New Object() {psAuthContext, psOutApplicationName})
            psOutApplicationName = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetApplicationNameAsync(ByVal psAuthContext As String, ByVal psOutApplicationName As String)
            Me.GetApplicationNameAsync(psAuthContext, psOutApplicationName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetApplicationNameAsync(ByVal psAuthContext As String, ByVal psOutApplicationName As String, ByVal userState As Object)
            If (Me.GetApplicationNameOperationCompleted Is Nothing) Then
                Me.GetApplicationNameOperationCompleted = AddressOf Me.OnGetApplicationNameOperationCompleted
            End If
            Me.InvokeAsync("GetApplicationName", New Object() {psAuthContext, psOutApplicationName}, Me.GetApplicationNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetApplicationNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetApplicationNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetApplicationNameCompleted(Me, New GetApplicationNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:Application:2.0/GetResource", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetResource(ByRef psAuthContext As String, ByVal psBaseName As String, ByVal psLocale As String, ByRef psResourceContext As String) As String
            Dim results() As Object = Me.Invoke("GetResource", New Object() {psAuthContext, psBaseName, psLocale, psResourceContext})
            psAuthContext = CType(results(1),String)
            psResourceContext = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetResourceAsync(ByVal psAuthContext As String, ByVal psBaseName As String, ByVal psLocale As String, ByVal psResourceContext As String)
            Me.GetResourceAsync(psAuthContext, psBaseName, psLocale, psResourceContext, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetResourceAsync(ByVal psAuthContext As String, ByVal psBaseName As String, ByVal psLocale As String, ByVal psResourceContext As String, ByVal userState As Object)
            If (Me.GetResourceOperationCompleted Is Nothing) Then
                Me.GetResourceOperationCompleted = AddressOf Me.OnGetResourceOperationCompleted
            End If
            Me.InvokeAsync("GetResource", New Object() {psAuthContext, psBaseName, psLocale, psResourceContext}, Me.GetResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetResourceCompleted(Me, New GetResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:Application:2.0/GetReleasedStates", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReleasedStates(ByVal psAuthContext As String, ByRef psOutReleasedStates() As String) As String
            Dim results() As Object = Me.Invoke("GetReleasedStates", New Object() {psAuthContext, psOutReleasedStates})
            psOutReleasedStates = CType(results(1),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReleasedStatesAsync(ByVal psAuthContext As String, ByVal psOutReleasedStates() As String)
            Me.GetReleasedStatesAsync(psAuthContext, psOutReleasedStates, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReleasedStatesAsync(ByVal psAuthContext As String, ByVal psOutReleasedStates() As String, ByVal userState As Object)
            If (Me.GetReleasedStatesOperationCompleted Is Nothing) Then
                Me.GetReleasedStatesOperationCompleted = AddressOf Me.OnGetReleasedStatesOperationCompleted
            End If
            Me.InvokeAsync("GetReleasedStates", New Object() {psAuthContext, psOutReleasedStates}, Me.GetReleasedStatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReleasedStatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReleasedStatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReleasedStatesCompleted(Me, New GetReleasedStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:Application:2.0/ChangePassword", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:Application:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePassword(ByVal psAuthContext As String, ByVal psOldPassword As String, ByVal psNewPassword As String) As String
            Dim results() As Object = Me.Invoke("ChangePassword", New Object() {psAuthContext, psOldPassword, psNewPassword})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal psAuthContext As String, ByVal psOldPassword As String, ByVal psNewPassword As String)
            Me.ChangePasswordAsync(psAuthContext, psOldPassword, psNewPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal psAuthContext As String, ByVal psOldPassword As String, ByVal psNewPassword As String, ByVal userState As Object)
            If (Me.ChangePasswordOperationCompleted Is Nothing) Then
                Me.ChangePasswordOperationCompleted = AddressOf Me.OnChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("ChangePassword", New Object() {psAuthContext, psOldPassword, psNewPassword}, Me.ChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordCompleted(Me, New ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetCurrentUserNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrentUserNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrentUserNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutUserName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetApplicationNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetApplicationNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetApplicationNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutApplicationName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetResourceCompletedEventHandler(ByVal sender As Object, ByVal e As GetResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psResourceContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetReleasedStatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetReleasedStatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReleasedStatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutReleasedStates() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
