'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace Baseline25
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BaseLine25Soap", [Namespace]:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5")>  _
    Partial Public Class BaseLine25
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private RetrieveMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBaselineNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBaselineIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContainingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBaselineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExpandBaselineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExpandReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompleteBaselineByModeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompleteReportByModeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExtendReportByBaselineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExtendReportByCandidateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RenameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FreezeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CanBeFrozenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Esri_Trisoft_TopicStatus_Tool.My.MySettings.Default.Esri_Trisoft_TopicStatus_Tool_Baseline25_BaseLine25
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event RetrieveMetaDataCompleted As RetrieveMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMetaDataCompleted As GetMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListCompleted As GetListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBaselineNameCompleted As GetBaselineNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBaselineIdCompleted As GetBaselineIdCompletedEventHandler
        
        '''<remarks/>
        Public Event ContainingCompleted As ContainingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBaselineCompleted As GetBaselineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportCompleted As GetReportCompletedEventHandler
        
        '''<remarks/>
        Public Event ExpandBaselineCompleted As ExpandBaselineCompletedEventHandler
        
        '''<remarks/>
        Public Event ExpandReportCompleted As ExpandReportCompletedEventHandler
        
        '''<remarks/>
        Public Event CompleteBaselineByModeCompleted As CompleteBaselineByModeCompletedEventHandler
        
        '''<remarks/>
        Public Event CompleteReportByModeCompleted As CompleteReportByModeCompletedEventHandler
        
        '''<remarks/>
        Public Event ExtendReportByBaselineCompleted As ExtendReportByBaselineCompletedEventHandler
        
        '''<remarks/>
        Public Event ExtendReportByCandidateCompleted As ExtendReportByCandidateCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCompleted As CreateCompletedEventHandler
        
        '''<remarks/>
        Public Event RenameCompleted As RenameCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCompleted As DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCompleted As UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMetaDataCompleted As SetMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event FreezeCompleted As FreezeCompletedEventHandler
        
        '''<remarks/>
        Public Event CanBeFrozenCompleted As CanBeFrozenCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/RetrieveMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveMetaData(ByRef psAuthContext As String, ByVal pasBaselineIds() As String, ByVal psXMLMetaDataFilter As String, ByVal psXMLRequestedMetaData As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveMetaData", New Object() {psAuthContext, pasBaselineIds, psXMLMetaDataFilter, psXMLRequestedMetaData, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveMetaDataAsync(ByVal psAuthContext As String, ByVal pasBaselineIds() As String, ByVal psXMLMetaDataFilter As String, ByVal psXMLRequestedMetaData As String, ByVal psOutXMLObjList As String)
            Me.RetrieveMetaDataAsync(psAuthContext, pasBaselineIds, psXMLMetaDataFilter, psXMLRequestedMetaData, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveMetaDataAsync(ByVal psAuthContext As String, ByVal pasBaselineIds() As String, ByVal psXMLMetaDataFilter As String, ByVal psXMLRequestedMetaData As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.RetrieveMetaDataOperationCompleted Is Nothing) Then
                Me.RetrieveMetaDataOperationCompleted = AddressOf Me.OnRetrieveMetaDataOperationCompleted
            End If
            Me.InvokeAsync("RetrieveMetaData", New Object() {psAuthContext, pasBaselineIds, psXMLMetaDataFilter, psXMLRequestedMetaData, psOutXMLObjList}, Me.RetrieveMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveMetaDataCompleted(Me, New RetrieveMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/GetMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMetaData(ByRef psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLRequestedMetaData As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("GetMetaData", New Object() {psAuthContext, psBaselineId, psXMLRequestedMetaData, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMetaDataAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLRequestedMetaData As String, ByVal psOutXMLObjList As String)
            Me.GetMetaDataAsync(psAuthContext, psBaselineId, psXMLRequestedMetaData, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMetaDataAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLRequestedMetaData As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.GetMetaDataOperationCompleted Is Nothing) Then
                Me.GetMetaDataOperationCompleted = AddressOf Me.OnGetMetaDataOperationCompleted
            End If
            Me.InvokeAsync("GetMetaData", New Object() {psAuthContext, psBaselineId, psXMLRequestedMetaData, psOutXMLObjList}, Me.GetMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMetaDataCompleted(Me, New GetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/GetList", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetList(ByRef psAuthContext As String, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetaData As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("GetList", New Object() {psAuthContext, psXMLMetadataFilter, psXMLRequestedMetaData, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListAsync(ByVal psAuthContext As String, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetaData As String, ByVal psOutXMLObjList As String)
            Me.GetListAsync(psAuthContext, psXMLMetadataFilter, psXMLRequestedMetaData, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListAsync(ByVal psAuthContext As String, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetaData As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.GetListOperationCompleted Is Nothing) Then
                Me.GetListOperationCompleted = AddressOf Me.OnGetListOperationCompleted
            End If
            Me.InvokeAsync("GetList", New Object() {psAuthContext, psXMLMetadataFilter, psXMLRequestedMetaData, psOutXMLObjList}, Me.GetListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListCompleted(Me, New GetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/GetBaselineName", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBaselineName(ByRef psAuthContext As String, ByVal psBaselineId As String, ByRef psOutBaselineName As String) As String
            Dim results() As Object = Me.Invoke("GetBaselineName", New Object() {psAuthContext, psBaselineId, psOutBaselineName})
            psAuthContext = CType(results(1),String)
            psOutBaselineName = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBaselineNameAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psOutBaselineName As String)
            Me.GetBaselineNameAsync(psAuthContext, psBaselineId, psOutBaselineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBaselineNameAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psOutBaselineName As String, ByVal userState As Object)
            If (Me.GetBaselineNameOperationCompleted Is Nothing) Then
                Me.GetBaselineNameOperationCompleted = AddressOf Me.OnGetBaselineNameOperationCompleted
            End If
            Me.InvokeAsync("GetBaselineName", New Object() {psAuthContext, psBaselineId, psOutBaselineName}, Me.GetBaselineNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBaselineNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBaselineNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBaselineNameCompleted(Me, New GetBaselineNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/GetBaselineId", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBaselineId(ByRef psAuthContext As String, ByVal psBaselineName As String, ByRef psOutBaselineId As String) As String
            Dim results() As Object = Me.Invoke("GetBaselineId", New Object() {psAuthContext, psBaselineName, psOutBaselineId})
            psAuthContext = CType(results(1),String)
            psOutBaselineId = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBaselineIdAsync(ByVal psAuthContext As String, ByVal psBaselineName As String, ByVal psOutBaselineId As String)
            Me.GetBaselineIdAsync(psAuthContext, psBaselineName, psOutBaselineId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBaselineIdAsync(ByVal psAuthContext As String, ByVal psBaselineName As String, ByVal psOutBaselineId As String, ByVal userState As Object)
            If (Me.GetBaselineIdOperationCompleted Is Nothing) Then
                Me.GetBaselineIdOperationCompleted = AddressOf Me.OnGetBaselineIdOperationCompleted
            End If
            Me.InvokeAsync("GetBaselineId", New Object() {psAuthContext, psBaselineName, psOutBaselineId}, Me.GetBaselineIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBaselineIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBaselineIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBaselineIdCompleted(Me, New GetBaselineIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/Containing", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Containing(ByRef psAuthContext As String, ByVal psLogicalId As String, ByVal psVersionNumber As String, ByVal psXMLRequestedMetaData As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("Containing", New Object() {psAuthContext, psLogicalId, psVersionNumber, psXMLRequestedMetaData, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContainingAsync(ByVal psAuthContext As String, ByVal psLogicalId As String, ByVal psVersionNumber As String, ByVal psXMLRequestedMetaData As String, ByVal psOutXMLObjList As String)
            Me.ContainingAsync(psAuthContext, psLogicalId, psVersionNumber, psXMLRequestedMetaData, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContainingAsync(ByVal psAuthContext As String, ByVal psLogicalId As String, ByVal psVersionNumber As String, ByVal psXMLRequestedMetaData As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.ContainingOperationCompleted Is Nothing) Then
                Me.ContainingOperationCompleted = AddressOf Me.OnContainingOperationCompleted
            End If
            Me.InvokeAsync("Containing", New Object() {psAuthContext, psLogicalId, psVersionNumber, psXMLRequestedMetaData, psOutXMLObjList}, Me.ContainingOperationCompleted, userState)
        End Sub
        
        Private Sub OnContainingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContainingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContainingCompleted(Me, New ContainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/GetBaseline", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBaseline(ByRef psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String, ByRef psOutXMLBaseline As String) As String
            Dim results() As Object = Me.Invoke("GetBaseline", New Object() {psAuthContext, psBaselineId, psXMLRequestedMetadata, psOutXMLObjList, psOutXMLBaseline})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            psOutXMLBaseline = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBaselineAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal psOutXMLBaseline As String)
            Me.GetBaselineAsync(psAuthContext, psBaselineId, psXMLRequestedMetadata, psOutXMLObjList, psOutXMLBaseline, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBaselineAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal psOutXMLBaseline As String, ByVal userState As Object)
            If (Me.GetBaselineOperationCompleted Is Nothing) Then
                Me.GetBaselineOperationCompleted = AddressOf Me.OnGetBaselineOperationCompleted
            End If
            Me.InvokeAsync("GetBaseline", New Object() {psAuthContext, psBaselineId, psXMLRequestedMetadata, psOutXMLObjList, psOutXMLBaseline}, Me.GetBaselineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBaselineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBaselineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBaselineCompleted(Me, New GetBaselineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/GetReport", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReport(ByRef psAuthContext As String, ByVal psBaselineId As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("GetReport", New Object() {psAuthContext, psBaselineId, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String)
            Me.GetReportAsync(psAuthContext, psBaselineId, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.GetReportOperationCompleted Is Nothing) Then
                Me.GetReportOperationCompleted = AddressOf Me.OnGetReportOperationCompleted
            End If
            Me.InvokeAsync("GetReport", New Object() {psAuthContext, psBaselineId, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport}, Me.GetReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportCompleted(Me, New GetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/ExpandBaseline", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExpandBaseline(ByRef psAuthContext As String, ByVal psBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("ExpandBaseline", New Object() {psAuthContext, psBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExpandBaselineAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String)
            Me.ExpandBaselineAsync(psAuthContext, psBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExpandBaselineAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.ExpandBaselineOperationCompleted Is Nothing) Then
                Me.ExpandBaselineOperationCompleted = AddressOf Me.OnExpandBaselineOperationCompleted
            End If
            Me.InvokeAsync("ExpandBaseline", New Object() {psAuthContext, psBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport}, Me.ExpandBaselineOperationCompleted, userState)
        End Sub
        
        Private Sub OnExpandBaselineOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExpandBaselineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExpandBaselineCompleted(Me, New ExpandBaselineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/ExpandReport", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExpandReport(ByRef psAuthContext As String, ByVal psBaselineReport As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("ExpandReport", New Object() {psAuthContext, psBaselineReport, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExpandReportAsync(ByVal psAuthContext As String, ByVal psBaselineReport As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String)
            Me.ExpandReportAsync(psAuthContext, psBaselineReport, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExpandReportAsync(ByVal psAuthContext As String, ByVal psBaselineReport As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.ExpandReportOperationCompleted Is Nothing) Then
                Me.ExpandReportOperationCompleted = AddressOf Me.OnExpandReportOperationCompleted
            End If
            Me.InvokeAsync("ExpandReport", New Object() {psAuthContext, psBaselineReport, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport}, Me.ExpandReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnExpandReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExpandReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExpandReportCompleted(Me, New ExpandReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/CompleteBaselineByMode", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CompleteBaselineByMode(ByRef psAuthContext As String, ByVal psBaselineId As String, ByVal peAutoCompleteMode As eBaselineAutoCompleteMode, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("CompleteBaselineByMode", New Object() {psAuthContext, psBaselineId, peAutoCompleteMode, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompleteBaselineByModeAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal peAutoCompleteMode As eBaselineAutoCompleteMode, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String)
            Me.CompleteBaselineByModeAsync(psAuthContext, psBaselineId, peAutoCompleteMode, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompleteBaselineByModeAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal peAutoCompleteMode As eBaselineAutoCompleteMode, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.CompleteBaselineByModeOperationCompleted Is Nothing) Then
                Me.CompleteBaselineByModeOperationCompleted = AddressOf Me.OnCompleteBaselineByModeOperationCompleted
            End If
            Me.InvokeAsync("CompleteBaselineByMode", New Object() {psAuthContext, psBaselineId, peAutoCompleteMode, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport}, Me.CompleteBaselineByModeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompleteBaselineByModeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteBaselineByModeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompleteBaselineByModeCompleted(Me, New CompleteBaselineByModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/CompleteReportByMode", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CompleteReportByMode(ByRef psAuthContext As String, ByVal psBaselineReport As String, ByVal peAutoCompleteMode As eBaselineAutoCompleteMode, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("CompleteReportByMode", New Object() {psAuthContext, psBaselineReport, peAutoCompleteMode, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompleteReportByModeAsync(ByVal psAuthContext As String, ByVal psBaselineReport As String, ByVal peAutoCompleteMode As eBaselineAutoCompleteMode, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String)
            Me.CompleteReportByModeAsync(psAuthContext, psBaselineReport, peAutoCompleteMode, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompleteReportByModeAsync(ByVal psAuthContext As String, ByVal psBaselineReport As String, ByVal peAutoCompleteMode As eBaselineAutoCompleteMode, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.CompleteReportByModeOperationCompleted Is Nothing) Then
                Me.CompleteReportByModeOperationCompleted = AddressOf Me.OnCompleteReportByModeOperationCompleted
            End If
            Me.InvokeAsync("CompleteReportByMode", New Object() {psAuthContext, psBaselineReport, peAutoCompleteMode, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport}, Me.CompleteReportByModeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompleteReportByModeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteReportByModeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompleteReportByModeCompleted(Me, New CompleteReportByModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/ExtendReportByBaseline", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExtendReportByBaseline(ByRef psAuthContext As String, ByVal psBaselineReport As String, ByVal psExtendBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("ExtendReportByBaseline", New Object() {psAuthContext, psBaselineReport, psExtendBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExtendReportByBaselineAsync(ByVal psAuthContext As String, ByVal psBaselineReport As String, ByVal psExtendBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String)
            Me.ExtendReportByBaselineAsync(psAuthContext, psBaselineReport, psExtendBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExtendReportByBaselineAsync(ByVal psAuthContext As String, ByVal psBaselineReport As String, ByVal psExtendBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.ExtendReportByBaselineOperationCompleted Is Nothing) Then
                Me.ExtendReportByBaselineOperationCompleted = AddressOf Me.OnExtendReportByBaselineOperationCompleted
            End If
            Me.InvokeAsync("ExtendReportByBaseline", New Object() {psAuthContext, psBaselineReport, psExtendBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport}, Me.ExtendReportByBaselineOperationCompleted, userState)
        End Sub
        
        Private Sub OnExtendReportByBaselineOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExtendReportByBaselineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExtendReportByBaselineCompleted(Me, New ExtendReportByBaselineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/ExtendReportByCandidate", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExtendReportByCandidate(ByRef psAuthContext As String, ByVal psBaselineReport As String, ByVal psExtendBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByRef psOutXMLBaselineReport As String) As String
            Dim results() As Object = Me.Invoke("ExtendReportByCandidate", New Object() {psAuthContext, psBaselineReport, psExtendBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineReport = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExtendReportByCandidateAsync(ByVal psAuthContext As String, ByVal psBaselineReport As String, ByVal psExtendBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String)
            Me.ExtendReportByCandidateAsync(psAuthContext, psBaselineReport, psExtendBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExtendReportByCandidateAsync(ByVal psAuthContext As String, ByVal psBaselineReport As String, ByVal psExtendBaselineId As String, ByVal pasStartLogicalIds() As String, ByVal pasStartResourceLogicalIds() As String, ByVal pasLanguages() As String, ByVal pasIllustrationLanguages() As String, ByVal pasResourceLanguages() As String, ByVal pasResolutions() As String, ByVal psOutXMLBaselineReport As String, ByVal userState As Object)
            If (Me.ExtendReportByCandidateOperationCompleted Is Nothing) Then
                Me.ExtendReportByCandidateOperationCompleted = AddressOf Me.OnExtendReportByCandidateOperationCompleted
            End If
            Me.InvokeAsync("ExtendReportByCandidate", New Object() {psAuthContext, psBaselineReport, psExtendBaselineId, pasStartLogicalIds, pasStartResourceLogicalIds, pasLanguages, pasIllustrationLanguages, pasResourceLanguages, pasResolutions, psOutXMLBaselineReport}, Me.ExtendReportByCandidateOperationCompleted, userState)
        End Sub
        
        Private Sub OnExtendReportByCandidateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExtendReportByCandidateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExtendReportByCandidateCompleted(Me, New ExtendReportByCandidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/Create", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Create(ByRef psAuthContext As String, ByVal psBaselineName As String, ByVal psUserGroup As String, ByRef psOutBaselineId As String) As String
            Dim results() As Object = Me.Invoke("Create", New Object() {psAuthContext, psBaselineName, psUserGroup, psOutBaselineId})
            psAuthContext = CType(results(1),String)
            psOutBaselineId = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal psAuthContext As String, ByVal psBaselineName As String, ByVal psUserGroup As String, ByVal psOutBaselineId As String)
            Me.CreateAsync(psAuthContext, psBaselineName, psUserGroup, psOutBaselineId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal psAuthContext As String, ByVal psBaselineName As String, ByVal psUserGroup As String, ByVal psOutBaselineId As String, ByVal userState As Object)
            If (Me.CreateOperationCompleted Is Nothing) Then
                Me.CreateOperationCompleted = AddressOf Me.OnCreateOperationCompleted
            End If
            Me.InvokeAsync("Create", New Object() {psAuthContext, psBaselineName, psUserGroup, psOutBaselineId}, Me.CreateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCompleted(Me, New CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/Rename", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Rename(ByRef psAuthContext As String, ByVal psBaselineId As String, ByVal psNewBaselineName As String) As String
            Dim results() As Object = Me.Invoke("Rename", New Object() {psAuthContext, psBaselineId, psNewBaselineName})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RenameAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psNewBaselineName As String)
            Me.RenameAsync(psAuthContext, psBaselineId, psNewBaselineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RenameAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psNewBaselineName As String, ByVal userState As Object)
            If (Me.RenameOperationCompleted Is Nothing) Then
                Me.RenameOperationCompleted = AddressOf Me.OnRenameOperationCompleted
            End If
            Me.InvokeAsync("Rename", New Object() {psAuthContext, psBaselineId, psNewBaselineName}, Me.RenameOperationCompleted, userState)
        End Sub
        
        Private Sub OnRenameOperationCompleted(ByVal arg As Object)
            If (Not (Me.RenameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RenameCompleted(Me, New RenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/Delete", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete(ByRef psAuthContext As String, ByVal psBaselineId As String) As String
            Dim results() As Object = Me.Invoke("Delete", New Object() {psAuthContext, psBaselineId})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal psAuthContext As String, ByVal psBaselineId As String)
            Me.DeleteAsync(psAuthContext, psBaselineId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal userState As Object)
            If (Me.DeleteOperationCompleted Is Nothing) Then
                Me.DeleteOperationCompleted = AddressOf Me.OnDeleteOperationCompleted
            End If
            Me.InvokeAsync("Delete", New Object() {psAuthContext, psBaselineId}, Me.DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCompleted(Me, New DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/Update", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update(ByRef psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLChanges As String) As String
            Dim results() As Object = Me.Invoke("Update", New Object() {psAuthContext, psBaselineId, psXMLChanges})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLChanges As String)
            Me.UpdateAsync(psAuthContext, psBaselineId, psXMLChanges, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLChanges As String, ByVal userState As Object)
            If (Me.UpdateOperationCompleted Is Nothing) Then
                Me.UpdateOperationCompleted = AddressOf Me.OnUpdateOperationCompleted
            End If
            Me.InvokeAsync("Update", New Object() {psAuthContext, psBaselineId, psXMLChanges}, Me.UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCompleted(Me, New UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/SetMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetMetaData(ByRef psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLMetadata As String) As String
            Dim results() As Object = Me.Invoke("SetMetaData", New Object() {psAuthContext, psBaselineId, psXMLMetadata})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetMetaDataAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLMetadata As String)
            Me.SetMetaDataAsync(psAuthContext, psBaselineId, psXMLMetadata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMetaDataAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psXMLMetadata As String, ByVal userState As Object)
            If (Me.SetMetaDataOperationCompleted Is Nothing) Then
                Me.SetMetaDataOperationCompleted = AddressOf Me.OnSetMetaDataOperationCompleted
            End If
            Me.InvokeAsync("SetMetaData", New Object() {psAuthContext, psBaselineId, psXMLMetadata}, Me.SetMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMetaDataCompleted(Me, New SetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/Freeze", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Freeze(ByRef psAuthContext As String, ByVal psBaselineId As String, ByRef psOutXMLBaselineFreezeReport As String, ByRef pbOutIsFrozen As Boolean) As String
            Dim results() As Object = Me.Invoke("Freeze", New Object() {psAuthContext, psBaselineId, psOutXMLBaselineFreezeReport, pbOutIsFrozen})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineFreezeReport = CType(results(2),String)
            pbOutIsFrozen = CType(results(3),Boolean)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FreezeAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psOutXMLBaselineFreezeReport As String, ByVal pbOutIsFrozen As Boolean)
            Me.FreezeAsync(psAuthContext, psBaselineId, psOutXMLBaselineFreezeReport, pbOutIsFrozen, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FreezeAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psOutXMLBaselineFreezeReport As String, ByVal pbOutIsFrozen As Boolean, ByVal userState As Object)
            If (Me.FreezeOperationCompleted Is Nothing) Then
                Me.FreezeOperationCompleted = AddressOf Me.OnFreezeOperationCompleted
            End If
            Me.InvokeAsync("Freeze", New Object() {psAuthContext, psBaselineId, psOutXMLBaselineFreezeReport, pbOutIsFrozen}, Me.FreezeOperationCompleted, userState)
        End Sub
        
        Private Sub OnFreezeOperationCompleted(ByVal arg As Object)
            If (Not (Me.FreezeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FreezeCompleted(Me, New FreezeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5/CanBeFrozen", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CanBeFrozen(ByRef psAuthContext As String, ByVal psBaselineId As String, ByRef psOutXMLBaselineFreezeReport As String, ByRef pbOutCanBeFrozen As Boolean) As String
            Dim results() As Object = Me.Invoke("CanBeFrozen", New Object() {psAuthContext, psBaselineId, psOutXMLBaselineFreezeReport, pbOutCanBeFrozen})
            psAuthContext = CType(results(1),String)
            psOutXMLBaselineFreezeReport = CType(results(2),String)
            pbOutCanBeFrozen = CType(results(3),Boolean)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CanBeFrozenAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psOutXMLBaselineFreezeReport As String, ByVal pbOutCanBeFrozen As Boolean)
            Me.CanBeFrozenAsync(psAuthContext, psBaselineId, psOutXMLBaselineFreezeReport, pbOutCanBeFrozen, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CanBeFrozenAsync(ByVal psAuthContext As String, ByVal psBaselineId As String, ByVal psOutXMLBaselineFreezeReport As String, ByVal pbOutCanBeFrozen As Boolean, ByVal userState As Object)
            If (Me.CanBeFrozenOperationCompleted Is Nothing) Then
                Me.CanBeFrozenOperationCompleted = AddressOf Me.OnCanBeFrozenOperationCompleted
            End If
            Me.InvokeAsync("CanBeFrozen", New Object() {psAuthContext, psBaselineId, psOutXMLBaselineFreezeReport, pbOutCanBeFrozen}, Me.CanBeFrozenOperationCompleted, userState)
        End Sub
        
        Private Sub OnCanBeFrozenOperationCompleted(ByVal arg As Object)
            If (Not (Me.CanBeFrozenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CanBeFrozenCompleted(Me, New CanBeFrozenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:BaseLine:2.5")>  _
    Public Enum eBaselineAutoCompleteMode
        
        '''<remarks/>
        ISHFirstVersion
        
        '''<remarks/>
        ISHLatestReleased
        
        '''<remarks/>
        ISHLatestAvailable
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetListCompletedEventHandler(ByVal sender As Object, ByVal e As GetListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetBaselineNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetBaselineNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBaselineNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutBaselineName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetBaselineIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetBaselineIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBaselineIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutBaselineId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ContainingCompletedEventHandler(ByVal sender As Object, ByVal e As ContainingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContainingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetBaselineCompletedEventHandler(ByVal sender As Object, ByVal e As GetBaselineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBaselineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaseline() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ExpandBaselineCompletedEventHandler(ByVal sender As Object, ByVal e As ExpandBaselineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExpandBaselineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ExpandReportCompletedEventHandler(ByVal sender As Object, ByVal e As ExpandReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExpandReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CompleteBaselineByModeCompletedEventHandler(ByVal sender As Object, ByVal e As CompleteBaselineByModeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompleteBaselineByModeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CompleteReportByModeCompletedEventHandler(ByVal sender As Object, ByVal e As CompleteReportByModeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompleteReportByModeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ExtendReportByBaselineCompletedEventHandler(ByVal sender As Object, ByVal e As ExtendReportByBaselineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExtendReportByBaselineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ExtendReportByCandidateCompletedEventHandler(ByVal sender As Object, ByVal e As ExtendReportByCandidateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExtendReportByCandidateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CreateCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutBaselineId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RenameCompletedEventHandler(ByVal sender As Object, ByVal e As RenameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RenameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub SetMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As SetMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub FreezeCompletedEventHandler(ByVal sender As Object, ByVal e As FreezeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FreezeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineFreezeReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pbOutIsFrozen() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CanBeFrozenCompletedEventHandler(ByVal sender As Object, ByVal e As CanBeFrozenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CanBeFrozenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLBaselineFreezeReport() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pbOutCanBeFrozen() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Boolean)
            End Get
        End Property
    End Class
End Namespace
