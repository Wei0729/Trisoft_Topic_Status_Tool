'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace DocumentObj20
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="DocumentObj20Soap", [Namespace]:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0")>  _
    Partial Public Class DocumentObj20
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CreateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddShortCutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveShortCutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateOrUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TerminologyUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UndoCheckOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MoveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartTranslationMgmtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocObjOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPossibleTransitionStatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInitialStatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveObjectsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveMetaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrievebyIshLngRefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveLatestVersionsInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EvaluateDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartReuseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Esri_Trisoft_TopicStatus_Tool.My.MySettings.Default.Esri_Trisoft_TopicStatus_Tool_DocumentObj20_DocumentObj20
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CreateCompleted As CreateCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCompleted As DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCompleted As UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event AddShortCutCompleted As AddShortCutCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveShortCutCompleted As RemoveShortCutCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateOrUpdateCompleted As CreateOrUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event TerminologyUpdateCompleted As TerminologyUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckOutCompleted As CheckOutCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckInCompleted As CheckInCompletedEventHandler
        
        '''<remarks/>
        Public Event UndoCheckOutCompleted As UndoCheckOutCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMetaDataCompleted As SetMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event MoveCompleted As MoveCompletedEventHandler
        
        '''<remarks/>
        Public Event StartTranslationMgmtCompleted As StartTranslationMgmtCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocObjCompleted As GetDocObjCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPossibleTransitionStatesCompleted As GetPossibleTransitionStatesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInitialStatesCompleted As GetInitialStatesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMetaDataCompleted As GetMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event FindCompleted As FindCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveObjectsCompleted As RetrieveObjectsCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveMetaDataCompleted As RetrieveMetaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrievebyIshLngRefCompleted As RetrievebyIshLngRefCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveLatestVersionsInfoCompleted As RetrieveLatestVersionsInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event EvaluateDocumentCompleted As EvaluateDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event StartReuseCompleted As StartReuseCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/Create", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Create(ByRef psAuthContext As String, ByVal psFolderId As String, ByVal peISHType As eISHType, ByRef psDocId As String, ByRef psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetaData As String, ByVal psEdt As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pbData() As Byte) As String
            Dim results() As Object = Me.Invoke("Create", New Object() {psAuthContext, psFolderId, peISHType, psDocId, psVersion, psLng, psResolution, psXMLMetaData, psEdt, pbData})
            psAuthContext = CType(results(1),String)
            psDocId = CType(results(2),String)
            psVersion = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal psAuthContext As String, ByVal psFolderId As String, ByVal peISHType As eISHType, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetaData As String, ByVal psEdt As String, ByVal pbData() As Byte)
            Me.CreateAsync(psAuthContext, psFolderId, peISHType, psDocId, psVersion, psLng, psResolution, psXMLMetaData, psEdt, pbData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal psAuthContext As String, ByVal psFolderId As String, ByVal peISHType As eISHType, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetaData As String, ByVal psEdt As String, ByVal pbData() As Byte, ByVal userState As Object)
            If (Me.CreateOperationCompleted Is Nothing) Then
                Me.CreateOperationCompleted = AddressOf Me.OnCreateOperationCompleted
            End If
            Me.InvokeAsync("Create", New Object() {psAuthContext, psFolderId, peISHType, psDocId, psVersion, psLng, psResolution, psXMLMetaData, psEdt, pbData}, Me.CreateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCompleted(Me, New CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/Delete", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete(ByRef psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String) As String
            Dim results() As Object = Me.Invoke("Delete", New Object() {psAuthContext, psDocId, psVersion, psLng, psResolution})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String)
            Me.DeleteAsync(psAuthContext, psDocId, psVersion, psLng, psResolution, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal userState As Object)
            If (Me.DeleteOperationCompleted Is Nothing) Then
                Me.DeleteOperationCompleted = AddressOf Me.OnDeleteOperationCompleted
            End If
            Me.InvokeAsync("Delete", New Object() {psAuthContext, psDocId, psVersion, psLng, psResolution}, Me.DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCompleted(Me, New DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/Update", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update(ByRef psAuthContext As String, ByVal psDocId As String, ByRef psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetaData As String, ByVal psXMLRequiredCurrentState As String, ByVal psEdt As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pbData() As Byte) As String
            Dim results() As Object = Me.Invoke("Update", New Object() {psAuthContext, psDocId, psVersion, psLng, psResolution, psXMLMetaData, psXMLRequiredCurrentState, psEdt, pbData})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetaData As String, ByVal psXMLRequiredCurrentState As String, ByVal psEdt As String, ByVal pbData() As Byte)
            Me.UpdateAsync(psAuthContext, psDocId, psVersion, psLng, psResolution, psXMLMetaData, psXMLRequiredCurrentState, psEdt, pbData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetaData As String, ByVal psXMLRequiredCurrentState As String, ByVal psEdt As String, ByVal pbData() As Byte, ByVal userState As Object)
            If (Me.UpdateOperationCompleted Is Nothing) Then
                Me.UpdateOperationCompleted = AddressOf Me.OnUpdateOperationCompleted
            End If
            Me.InvokeAsync("Update", New Object() {psAuthContext, psDocId, psVersion, psLng, psResolution, psXMLMetaData, psXMLRequiredCurrentState, psEdt, pbData}, Me.UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCompleted(Me, New UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/AddShortCut", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddShortCut(ByRef psAuthContext As String, ByVal psDocId As String, ByVal psToRefFolderId As String) As String
            Dim results() As Object = Me.Invoke("AddShortCut", New Object() {psAuthContext, psDocId, psToRefFolderId})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddShortCutAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psToRefFolderId As String)
            Me.AddShortCutAsync(psAuthContext, psDocId, psToRefFolderId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddShortCutAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psToRefFolderId As String, ByVal userState As Object)
            If (Me.AddShortCutOperationCompleted Is Nothing) Then
                Me.AddShortCutOperationCompleted = AddressOf Me.OnAddShortCutOperationCompleted
            End If
            Me.InvokeAsync("AddShortCut", New Object() {psAuthContext, psDocId, psToRefFolderId}, Me.AddShortCutOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddShortCutOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddShortCutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddShortCutCompleted(Me, New AddShortCutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/RemoveShortCut", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveShortCut(ByRef psAuthContext As String, ByVal psDocId As String, ByVal psFromRefFolderId As String) As String
            Dim results() As Object = Me.Invoke("RemoveShortCut", New Object() {psAuthContext, psDocId, psFromRefFolderId})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveShortCutAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psFromRefFolderId As String)
            Me.RemoveShortCutAsync(psAuthContext, psDocId, psFromRefFolderId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveShortCutAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psFromRefFolderId As String, ByVal userState As Object)
            If (Me.RemoveShortCutOperationCompleted Is Nothing) Then
                Me.RemoveShortCutOperationCompleted = AddressOf Me.OnRemoveShortCutOperationCompleted
            End If
            Me.InvokeAsync("RemoveShortCut", New Object() {psAuthContext, psDocId, psFromRefFolderId}, Me.RemoveShortCutOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveShortCutOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveShortCutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveShortCutCompleted(Me, New RemoveShortCutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/CreateOrUpdate", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateOrUpdate(ByRef psAuthContext As String, ByVal psFolderId As String, ByVal peISHType As eISHType, ByRef psDocId As String, ByRef psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psInitialState As String, ByVal psXMLMetaData As String, ByVal psXMLRequiredCurrentState As String, ByVal psEdt As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pbData() As Byte) As String
            Dim results() As Object = Me.Invoke("CreateOrUpdate", New Object() {psAuthContext, psFolderId, peISHType, psDocId, psVersion, psLng, psResolution, psInitialState, psXMLMetaData, psXMLRequiredCurrentState, psEdt, pbData})
            psAuthContext = CType(results(1),String)
            psDocId = CType(results(2),String)
            psVersion = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateOrUpdateAsync(ByVal psAuthContext As String, ByVal psFolderId As String, ByVal peISHType As eISHType, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psInitialState As String, ByVal psXMLMetaData As String, ByVal psXMLRequiredCurrentState As String, ByVal psEdt As String, ByVal pbData() As Byte)
            Me.CreateOrUpdateAsync(psAuthContext, psFolderId, peISHType, psDocId, psVersion, psLng, psResolution, psInitialState, psXMLMetaData, psXMLRequiredCurrentState, psEdt, pbData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateOrUpdateAsync(ByVal psAuthContext As String, ByVal psFolderId As String, ByVal peISHType As eISHType, ByVal psDocId As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psInitialState As String, ByVal psXMLMetaData As String, ByVal psXMLRequiredCurrentState As String, ByVal psEdt As String, ByVal pbData() As Byte, ByVal userState As Object)
            If (Me.CreateOrUpdateOperationCompleted Is Nothing) Then
                Me.CreateOrUpdateOperationCompleted = AddressOf Me.OnCreateOrUpdateOperationCompleted
            End If
            Me.InvokeAsync("CreateOrUpdate", New Object() {psAuthContext, psFolderId, peISHType, psDocId, psVersion, psLng, psResolution, psInitialState, psXMLMetaData, psXMLRequiredCurrentState, psEdt, pbData}, Me.CreateOrUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateOrUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateOrUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateOrUpdateCompleted(Me, New CreateOrUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/TerminologyUpdate", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TerminologyUpdate(ByRef psAuthContext As String, ByVal psDocId As String, ByRef psVersion As String, ByVal psStatus As String, ByVal psLanguages As String, ByVal psXMLMetaData As String) As String
            Dim results() As Object = Me.Invoke("TerminologyUpdate", New Object() {psAuthContext, psDocId, psVersion, psStatus, psLanguages, psXMLMetaData})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TerminologyUpdateAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psStatus As String, ByVal psLanguages As String, ByVal psXMLMetaData As String)
            Me.TerminologyUpdateAsync(psAuthContext, psDocId, psVersion, psStatus, psLanguages, psXMLMetaData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TerminologyUpdateAsync(ByVal psAuthContext As String, ByVal psDocId As String, ByVal psVersion As String, ByVal psStatus As String, ByVal psLanguages As String, ByVal psXMLMetaData As String, ByVal userState As Object)
            If (Me.TerminologyUpdateOperationCompleted Is Nothing) Then
                Me.TerminologyUpdateOperationCompleted = AddressOf Me.OnTerminologyUpdateOperationCompleted
            End If
            Me.InvokeAsync("TerminologyUpdate", New Object() {psAuthContext, psDocId, psVersion, psStatus, psLanguages, psXMLMetaData}, Me.TerminologyUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnTerminologyUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.TerminologyUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TerminologyUpdateCompleted(Me, New TerminologyUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/CheckOut", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckOut(ByRef psAuthContext As String, ByVal psDocID As String, ByRef psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("CheckOut", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            psOutXMLObjList = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckOutAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.CheckOutAsync(psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckOutAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.CheckOutOperationCompleted Is Nothing) Then
                Me.CheckOutOperationCompleted = AddressOf Me.OnCheckOutOperationCompleted
            End If
            Me.InvokeAsync("CheckOut", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLRequestedMetadata, psOutXMLObjList}, Me.CheckOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckOutCompleted(Me, New CheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/CheckIn", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIn(ByRef psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadata As String, ByVal psEdt As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pbData() As Byte) As String
            Dim results() As Object = Me.Invoke("CheckIn", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadata, psEdt, pbData})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckInAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadata As String, ByVal psEdt As String, ByVal pbData() As Byte)
            Me.CheckInAsync(psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadata, psEdt, pbData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckInAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadata As String, ByVal psEdt As String, ByVal pbData() As Byte, ByVal userState As Object)
            If (Me.CheckInOperationCompleted Is Nothing) Then
                Me.CheckInOperationCompleted = AddressOf Me.OnCheckInOperationCompleted
            End If
            Me.InvokeAsync("CheckIn", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadata, psEdt, pbData}, Me.CheckInOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckInOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckInCompleted(Me, New CheckInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/UndoCheckOut", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UndoCheckOut(ByRef psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String) As String
            Dim results() As Object = Me.Invoke("UndoCheckOut", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UndoCheckOutAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String)
            Me.UndoCheckOutAsync(psAuthContext, psDocID, psVersion, psLng, psResolution, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UndoCheckOutAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal userState As Object)
            If (Me.UndoCheckOutOperationCompleted Is Nothing) Then
                Me.UndoCheckOutOperationCompleted = AddressOf Me.OnUndoCheckOutOperationCompleted
            End If
            Me.InvokeAsync("UndoCheckOut", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution}, Me.UndoCheckOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnUndoCheckOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.UndoCheckOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UndoCheckOutCompleted(Me, New UndoCheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/SetMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetMetaData(ByRef psAuthContext As String, ByVal psDocID As String, ByRef psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadata As String, ByVal psXMLRequiredCurrentState As String) As String
            Dim results() As Object = Me.Invoke("SetMetaData", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadata, psXMLRequiredCurrentState})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetMetaDataAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadata As String, ByVal psXMLRequiredCurrentState As String)
            Me.SetMetaDataAsync(psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadata, psXMLRequiredCurrentState, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMetaDataAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadata As String, ByVal psXMLRequiredCurrentState As String, ByVal userState As Object)
            If (Me.SetMetaDataOperationCompleted Is Nothing) Then
                Me.SetMetaDataOperationCompleted = AddressOf Me.OnSetMetaDataOperationCompleted
            End If
            Me.InvokeAsync("SetMetaData", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadata, psXMLRequiredCurrentState}, Me.SetMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMetaDataCompleted(Me, New SetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/Move", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Move(ByRef psAuthContext As String, ByVal psDocIds As String, ByVal psFromFolderId As String, ByVal psToFolderId As String) As String
            Dim results() As Object = Me.Invoke("Move", New Object() {psAuthContext, psDocIds, psFromFolderId, psToFolderId})
            psAuthContext = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MoveAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal psFromFolderId As String, ByVal psToFolderId As String)
            Me.MoveAsync(psAuthContext, psDocIds, psFromFolderId, psToFolderId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MoveAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal psFromFolderId As String, ByVal psToFolderId As String, ByVal userState As Object)
            If (Me.MoveOperationCompleted Is Nothing) Then
                Me.MoveOperationCompleted = AddressOf Me.OnMoveOperationCompleted
            End If
            Me.InvokeAsync("Move", New Object() {psAuthContext, psDocIds, psFromFolderId, psToFolderId}, Me.MoveOperationCompleted, userState)
        End Sub
        
        Private Sub OnMoveOperationCompleted(ByVal arg As Object)
            If (Not (Me.MoveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MoveCompleted(Me, New MoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/StartTranslationMgmt", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartTranslationMgmt(ByRef psAuthContext As String, ByVal psDocIds As String, ByRef psVersion As String, ByRef psEventId As String) As String
            Dim results() As Object = Me.Invoke("StartTranslationMgmt", New Object() {psAuthContext, psDocIds, psVersion, psEventId})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            psEventId = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartTranslationMgmtAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal psVersion As String, ByVal psEventId As String)
            Me.StartTranslationMgmtAsync(psAuthContext, psDocIds, psVersion, psEventId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartTranslationMgmtAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal psVersion As String, ByVal psEventId As String, ByVal userState As Object)
            If (Me.StartTranslationMgmtOperationCompleted Is Nothing) Then
                Me.StartTranslationMgmtOperationCompleted = AddressOf Me.OnStartTranslationMgmtOperationCompleted
            End If
            Me.InvokeAsync("StartTranslationMgmt", New Object() {psAuthContext, psDocIds, psVersion, psEventId}, Me.StartTranslationMgmtOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartTranslationMgmtOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartTranslationMgmtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartTranslationMgmtCompleted(Me, New StartTranslationMgmtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/GetDocObj", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocObj(ByRef psAuthContext As String, ByVal psDocID As String, ByRef psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadataFilter As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("GetDocObj", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadataFilter, psXMLProductDef, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            psOutXMLObjList = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocObjAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadataFilter As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.GetDocObjAsync(psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadataFilter, psXMLProductDef, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocObjAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLMetadataFilter As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.GetDocObjOperationCompleted Is Nothing) Then
                Me.GetDocObjOperationCompleted = AddressOf Me.OnGetDocObjOperationCompleted
            End If
            Me.InvokeAsync("GetDocObj", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLMetadataFilter, psXMLProductDef, psXMLRequestedMetadata, psOutXMLObjList}, Me.GetDocObjOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocObjOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocObjCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocObjCompleted(Me, New GetDocObjCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/GetPossibleTransitionStates", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPossibleTransitionStates(ByRef psAuthContext As String, ByVal psDocID As String, ByRef psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByRef psOutStatesList() As String) As String
            Dim results() As Object = Me.Invoke("GetPossibleTransitionStates", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psOutStatesList})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            psOutStatesList = CType(results(3),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPossibleTransitionStatesAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psOutStatesList() As String)
            Me.GetPossibleTransitionStatesAsync(psAuthContext, psDocID, psVersion, psLng, psResolution, psOutStatesList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPossibleTransitionStatesAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psOutStatesList() As String, ByVal userState As Object)
            If (Me.GetPossibleTransitionStatesOperationCompleted Is Nothing) Then
                Me.GetPossibleTransitionStatesOperationCompleted = AddressOf Me.OnGetPossibleTransitionStatesOperationCompleted
            End If
            Me.InvokeAsync("GetPossibleTransitionStates", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psOutStatesList}, Me.GetPossibleTransitionStatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPossibleTransitionStatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPossibleTransitionStatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPossibleTransitionStatesCompleted(Me, New GetPossibleTransitionStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/GetInitialStates", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInitialStates(ByRef psAuthContext As String, ByVal peISHType As eISHType, ByRef psOutStatesList() As String) As String
            Dim results() As Object = Me.Invoke("GetInitialStates", New Object() {psAuthContext, peISHType, psOutStatesList})
            psAuthContext = CType(results(1),String)
            psOutStatesList = CType(results(2),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInitialStatesAsync(ByVal psAuthContext As String, ByVal peISHType As eISHType, ByVal psOutStatesList() As String)
            Me.GetInitialStatesAsync(psAuthContext, peISHType, psOutStatesList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInitialStatesAsync(ByVal psAuthContext As String, ByVal peISHType As eISHType, ByVal psOutStatesList() As String, ByVal userState As Object)
            If (Me.GetInitialStatesOperationCompleted Is Nothing) Then
                Me.GetInitialStatesOperationCompleted = AddressOf Me.OnGetInitialStatesOperationCompleted
            End If
            Me.InvokeAsync("GetInitialStates", New Object() {psAuthContext, peISHType, psOutStatesList}, Me.GetInitialStatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInitialStatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInitialStatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInitialStatesCompleted(Me, New GetInitialStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/GetMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMetaData(ByRef psAuthContext As String, ByVal psDocID As String, ByRef psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("GetMetaData", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            psOutXMLObjList = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMetaDataAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.GetMetaDataAsync(psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMetaDataAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psResolution As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.GetMetaDataOperationCompleted Is Nothing) Then
                Me.GetMetaDataOperationCompleted = AddressOf Me.OnGetMetaDataOperationCompleted
            End If
            Me.InvokeAsync("GetMetaData", New Object() {psAuthContext, psDocID, psVersion, psLng, psResolution, psXMLRequestedMetadata, psOutXMLObjList}, Me.GetMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMetaDataCompleted(Me, New GetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/Find", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Find(ByRef psAuthContext As String, ByVal psIshTypeFilter As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("Find", New Object() {psAuthContext, psIshTypeFilter, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindAsync(ByVal psAuthContext As String, ByVal psIshTypeFilter As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.FindAsync(psAuthContext, psIshTypeFilter, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindAsync(ByVal psAuthContext As String, ByVal psIshTypeFilter As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.FindOperationCompleted Is Nothing) Then
                Me.FindOperationCompleted = AddressOf Me.OnFindOperationCompleted
            End If
            Me.InvokeAsync("Find", New Object() {psAuthContext, psIshTypeFilter, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList}, Me.FindOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindCompleted(Me, New FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/RetrieveObjects", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveObjects(ByRef psAuthContext As String, ByVal psDocIds As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveObjects", New Object() {psAuthContext, psDocIds, peStatusFilter, psXMLMetadataFilter, psXMLProductDef, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveObjectsAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.RetrieveObjectsAsync(psAuthContext, psDocIds, peStatusFilter, psXMLMetadataFilter, psXMLProductDef, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveObjectsAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.RetrieveObjectsOperationCompleted Is Nothing) Then
                Me.RetrieveObjectsOperationCompleted = AddressOf Me.OnRetrieveObjectsOperationCompleted
            End If
            Me.InvokeAsync("RetrieveObjects", New Object() {psAuthContext, psDocIds, peStatusFilter, psXMLMetadataFilter, psXMLProductDef, psXMLRequestedMetadata, psOutXMLObjList}, Me.RetrieveObjectsOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveObjectsOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveObjectsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveObjectsCompleted(Me, New RetrieveObjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/RetrieveMetaData", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveMetaData(ByRef psAuthContext As String, ByVal psDocIds As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveMetaData", New Object() {psAuthContext, psDocIds, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveMetaDataAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String)
            Me.RetrieveMetaDataAsync(psAuthContext, psDocIds, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveMetaDataAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psXMLMetadataFilter As String, ByVal psXMLRequestedMetadata As String, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.RetrieveMetaDataOperationCompleted Is Nothing) Then
                Me.RetrieveMetaDataOperationCompleted = AddressOf Me.OnRetrieveMetaDataOperationCompleted
            End If
            Me.InvokeAsync("RetrieveMetaData", New Object() {psAuthContext, psDocIds, peStatusFilter, psXMLMetadataFilter, psXMLRequestedMetadata, psOutXMLObjList}, Me.RetrieveMetaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveMetaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveMetaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveMetaDataCompleted(Me, New RetrieveMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/RetrievebyIshLngRef", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrievebyIshLngRef(ByRef psAuthContext As String, ByVal psLngRefs As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByVal pbIncludeData As Boolean, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("RetrievebyIshLngRef", New Object() {psAuthContext, psLngRefs, psXMLProductDef, psXMLRequestedMetadata, pbIncludeData, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrievebyIshLngRefAsync(ByVal psAuthContext As String, ByVal psLngRefs As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByVal pbIncludeData As Boolean, ByVal psOutXMLObjList As String)
            Me.RetrievebyIshLngRefAsync(psAuthContext, psLngRefs, psXMLProductDef, psXMLRequestedMetadata, pbIncludeData, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrievebyIshLngRefAsync(ByVal psAuthContext As String, ByVal psLngRefs As String, ByVal psXMLProductDef As String, ByVal psXMLRequestedMetadata As String, ByVal pbIncludeData As Boolean, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.RetrievebyIshLngRefOperationCompleted Is Nothing) Then
                Me.RetrievebyIshLngRefOperationCompleted = AddressOf Me.OnRetrievebyIshLngRefOperationCompleted
            End If
            Me.InvokeAsync("RetrievebyIshLngRef", New Object() {psAuthContext, psLngRefs, psXMLProductDef, psXMLRequestedMetadata, pbIncludeData, psOutXMLObjList}, Me.RetrievebyIshLngRefOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrievebyIshLngRefOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrievebyIshLngRefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrievebyIshLngRefCompleted(Me, New RetrievebyIshLngRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/RetrieveLatestVersionsInfo", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveLatestVersionsInfo(ByRef psAuthContext As String, ByVal psDocIds As String, ByVal psLanguageFilter As String, ByVal psResolutionFilter As String, ByVal peStatusFilter As eISHStatusgroup, ByRef psOutXMLObjList As String) As String
            Dim results() As Object = Me.Invoke("RetrieveLatestVersionsInfo", New Object() {psAuthContext, psDocIds, psLanguageFilter, psResolutionFilter, peStatusFilter, psOutXMLObjList})
            psAuthContext = CType(results(1),String)
            psOutXMLObjList = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveLatestVersionsInfoAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal psLanguageFilter As String, ByVal psResolutionFilter As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psOutXMLObjList As String)
            Me.RetrieveLatestVersionsInfoAsync(psAuthContext, psDocIds, psLanguageFilter, psResolutionFilter, peStatusFilter, psOutXMLObjList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveLatestVersionsInfoAsync(ByVal psAuthContext As String, ByVal psDocIds As String, ByVal psLanguageFilter As String, ByVal psResolutionFilter As String, ByVal peStatusFilter As eISHStatusgroup, ByVal psOutXMLObjList As String, ByVal userState As Object)
            If (Me.RetrieveLatestVersionsInfoOperationCompleted Is Nothing) Then
                Me.RetrieveLatestVersionsInfoOperationCompleted = AddressOf Me.OnRetrieveLatestVersionsInfoOperationCompleted
            End If
            Me.InvokeAsync("RetrieveLatestVersionsInfo", New Object() {psAuthContext, psDocIds, psLanguageFilter, psResolutionFilter, peStatusFilter, psOutXMLObjList}, Me.RetrieveLatestVersionsInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveLatestVersionsInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveLatestVersionsInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveLatestVersionsInfoCompleted(Me, New RetrieveLatestVersionsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/EvaluateDocument", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EvaluateDocument(ByVal psAuthContext As String, ByVal psXmlInDocument As String, ByVal psXMLProductDef As String, ByVal pbValidateConditions As Boolean, ByRef psOutDocument As String) As Integer
            Dim results() As Object = Me.Invoke("EvaluateDocument", New Object() {psAuthContext, psXmlInDocument, psXMLProductDef, pbValidateConditions, psOutDocument})
            psOutDocument = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EvaluateDocumentAsync(ByVal psAuthContext As String, ByVal psXmlInDocument As String, ByVal psXMLProductDef As String, ByVal pbValidateConditions As Boolean, ByVal psOutDocument As String)
            Me.EvaluateDocumentAsync(psAuthContext, psXmlInDocument, psXMLProductDef, pbValidateConditions, psOutDocument, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EvaluateDocumentAsync(ByVal psAuthContext As String, ByVal psXmlInDocument As String, ByVal psXMLProductDef As String, ByVal pbValidateConditions As Boolean, ByVal psOutDocument As String, ByVal userState As Object)
            If (Me.EvaluateDocumentOperationCompleted Is Nothing) Then
                Me.EvaluateDocumentOperationCompleted = AddressOf Me.OnEvaluateDocumentOperationCompleted
            End If
            Me.InvokeAsync("EvaluateDocument", New Object() {psAuthContext, psXmlInDocument, psXMLProductDef, pbValidateConditions, psOutDocument}, Me.EvaluateDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnEvaluateDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.EvaluateDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EvaluateDocumentCompleted(Me, New EvaluateDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0/StartReuse", RequestNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", ResponseNamespace:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartReuse(ByRef psAuthContext As String, ByVal psDocID As String, ByRef psVersion As String, ByVal psLng As String, ByVal psIdToBeReused As String, ByRef psOutXMLReusedObj As String) As String
            Dim results() As Object = Me.Invoke("StartReuse", New Object() {psAuthContext, psDocID, psVersion, psLng, psIdToBeReused, psOutXMLReusedObj})
            psAuthContext = CType(results(1),String)
            psVersion = CType(results(2),String)
            psOutXMLReusedObj = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartReuseAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psIdToBeReused As String, ByVal psOutXMLReusedObj As String)
            Me.StartReuseAsync(psAuthContext, psDocID, psVersion, psLng, psIdToBeReused, psOutXMLReusedObj, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartReuseAsync(ByVal psAuthContext As String, ByVal psDocID As String, ByVal psVersion As String, ByVal psLng As String, ByVal psIdToBeReused As String, ByVal psOutXMLReusedObj As String, ByVal userState As Object)
            If (Me.StartReuseOperationCompleted Is Nothing) Then
                Me.StartReuseOperationCompleted = AddressOf Me.OnStartReuseOperationCompleted
            End If
            Me.InvokeAsync("StartReuse", New Object() {psAuthContext, psDocID, psVersion, psLng, psIdToBeReused, psOutXMLReusedObj}, Me.StartReuseOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartReuseOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartReuseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartReuseCompleted(Me, New StartReuseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0")>  _
    Public Enum eISHType
        
        '''<remarks/>
        ISHNone
        
        '''<remarks/>
        ISHMasterDoc
        
        '''<remarks/>
        ISHModule
        
        '''<remarks/>
        ISHIllustration
        
        '''<remarks/>
        ISHReusedObj
        
        '''<remarks/>
        ISHTemplate
        
        '''<remarks/>
        ISHLibrary
        
        '''<remarks/>
        ISHBaseline
        
        '''<remarks/>
        ISHPublication
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:trisoft.be:WebServices:InfoShare:DocumentObj:2.0")>  _
    Public Enum eISHStatusgroup
        
        '''<remarks/>
        ISHReleasedStates
        
        '''<remarks/>
        ISHReleasedOrDraftStates
        
        '''<remarks/>
        ISHOutOfDateOrReleasedStates
        
        '''<remarks/>
        ISHNoStatusFilter
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CreateCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psDocId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub AddShortCutCompletedEventHandler(ByVal sender As Object, ByVal e As AddShortCutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddShortCutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RemoveShortCutCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveShortCutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveShortCutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CreateOrUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As CreateOrUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateOrUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psDocId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub TerminologyUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As TerminologyUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TerminologyUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CheckOutCompletedEventHandler(ByVal sender As Object, ByVal e As CheckOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CheckInCompletedEventHandler(ByVal sender As Object, ByVal e As CheckInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub UndoCheckOutCompletedEventHandler(ByVal sender As Object, ByVal e As UndoCheckOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UndoCheckOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub SetMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As SetMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub MoveCompletedEventHandler(ByVal sender As Object, ByVal e As MoveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MoveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub StartTranslationMgmtCompletedEventHandler(ByVal sender As Object, ByVal e As StartTranslationMgmtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartTranslationMgmtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psEventId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetDocObjCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocObjCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocObjCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPossibleTransitionStatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetPossibleTransitionStatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPossibleTransitionStatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutStatesList() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetInitialStatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetInitialStatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInitialStatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutStatesList() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub FindCompletedEventHandler(ByVal sender As Object, ByVal e As FindCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveObjectsCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveObjectsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveObjectsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveMetaDataCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveMetaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveMetaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrievebyIshLngRefCompletedEventHandler(ByVal sender As Object, ByVal e As RetrievebyIshLngRefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrievebyIshLngRefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub RetrieveLatestVersionsInfoCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveLatestVersionsInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveLatestVersionsInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLObjList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub EvaluateDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As EvaluateDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EvaluateDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutDocument() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub StartReuseCompletedEventHandler(ByVal sender As Object, ByVal e As StartReuseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartReuseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psAuthContext() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property psOutXMLReusedObj() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
End Namespace
